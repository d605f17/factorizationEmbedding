{
    "collab_server" : "",
    "contents" : "source('SPPMI.r')\n#http://stackoverflow.com/questions/15170399/changing-r-default-library-path-using-libpaths-in-rprofile-site-fails-to-work\n\nsumVectorNorm <- function(id, matrix){\n  result <- 0\n  elements <- matrix[id, ]\n  elements <- norm(matrix, type = \"f\")\n  \n  for(element in  elements){\n    result <- result + element\n  }\n  return(result)\n}\n\ntrain <- function(filename){\n  numberOfItems <- 1682\n  numberOfUsers <- 943\n  K <- 20\n  beta <- matrix(runif(numberOfItems * K, 0, 1), nrow = numberOfItems, ncol = K)\n  gamma <- matrix(runif(numberOfItems * K, 0, 1), nrow = numberOfItems, ncol = K)\n  theta <- matrix(runif(numberOfUsers * K, 0, 1), nrow = numberOfUsers, ncol = K)\n  yi <- 0\n  alpha <- 40\n  lambda <- 0.05\n  \n  trainData <- read_delim(paste(getwd(), \"/ml-100k/\", filename, \".base\", sep = \"\"),\n                          \"\\t\", escape_double = FALSE, trim_ws = TRUE, \n                          col_names = c(\"userId\", \"movieId\", \"rating\", \"timestamp\"),\n                          col_types = cols(\n                            userId = col_integer(),\n                            movieId = col_integer(),\n                            rating = col_integer(),\n                            timestamp = col_integer()\n                          )\n  );\n  trainData <<- as.matrix(trainData)\n  SPPMI <- as.matrix(getSPPMI(\"SPPMI.csv\"))\n  \n  print('Training started')\n  for(step in 1:5000){\n    Lco <- 0\n    \n    for(row in 1:nrow(trainData)){\n      userId <- as.numeric(trainData[row, 1])\n      itemId <- as.numeric(trainData[row, 2])\n      rating <- as.numeric(trainData[row, 3])\n      \n      yui <- rating\n      cui <- 1 + alpha * yui\n      wi <- 0\n      cj <- 0\n      \n      Lco <- as.numeric(Lco + (cui * (yui - t(theta[userId, ]) %*% beta[itemId, ])^2 +\n                               (SPPMI[userId, itemId] - t(beta[itemId, ]) %*% gamma[itemId, ] - wi - cj)^2 +\n                                 lambda * (theta[userId, ] * sumVectorNorm(userId ,theta)^2) +\n                                 lambda * (beta[itemId, ] * sumVectorNorm(itemId, beta)^2) +\n                                 lambda * (gamma[itemId, ] * sumVectorNorm(itemId, gamma)^2))\n                                 )\n      theta[userId, ] <- (cui * beta[itemId, ] %*% t(beta[itemId, ]) + lambda * numberOfItems)^-1 * (cui * yui * beta[itemId, ])\n      beta[itemId, ] <- ((cui * theta[userId, ] %*% t(theta[userId, ])) + (gamma[itemId, ] %*% t(gamma[itemId, ]) + lambda * numberOfItems))^-1 *\n        (cui * yui * theta[userId, ] + (SPPMI[itemId, itemId] - wi - cj) * gamma[itemId, ])\n      gamma[itemId, ] <- (beta[itemId, ] %*% beta[itemId, ] + lambda * numberOfItems)^-1 * ((SPPMI[itemId, itemId] - wi - cj) * beta[itemId, ])\n    }\n  }\n}\n\n\n\n\n",
    "created" : 1494244512740.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3238940889",
    "id" : "C95F96B4",
    "lastKnownWriteTime" : 1494342334,
    "last_content_update" : 1494342334323,
    "path" : "C:/Development/P6/factorizationEmbedding/train.r",
    "project_path" : "train.r",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}