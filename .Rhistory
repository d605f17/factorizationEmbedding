test <- getSPPMI()
View(test)
rm(test)
source('SPPMI.r')
sumVectorNorm <- function(id, matrix){
result <- 0
elements <- matrix[id, ]
elements <- norm(matrix, type = "f")
for(element in  elements){
result <- result + element
}
return(result)
}
train <- function(filename){
numberOfItems <- 1682
numberOfUsers <- 943
K <- 20
beta <- matrix(runif(numberOfItems * K, 0, 1), nrow = numberOfItems, ncol = K)
gamma <- matrix(runif(numberOfItems * K, 0, 1), nrow = numberOfItems, ncol = K)
theta <- matrix(runif(numberOfUsers * K, 0, 1), nrow = numberOfUsers, ncol = K)
yi <- 0
alpha <- 40
lambda <- 0.05
library(readr)
trainData <- read_delim(paste(getwd(), "/ml-100k/", filename, ".base", sep = ""),
"\t", escape_double = FALSE, trim_ws = TRUE,
col_names = c("userId", "movieId", "rating", "timestamp"),
col_types = cols(
userId = col_integer(),
movieId = col_integer(),
rating = col_integer(),
timestamp = col_integer()
)
);
trainData <<- as.matrix(trainData)
SPPMI <- as.matrix(getSPPMI("SPPMI.csv"))
print('Training started')
for(step in 1:5000){
Lco <- 0
for(row in 1:nrow(trainData)){
userId <- as.numeric(trainData[row, 1])
itemId <- as.numeric(trainData[row, 2])
rating <- as.numeric(trainData[row, 3])
yui <- rating
cui <- 1 + alpha * yui
wi <- 0
cj <- 0
Lco <- as.numeric(Lco + (cui * (yui - t(theta[userId, ]) %*% beta[itemId, ])^2 +
(SPPMI[userId, itemId] - t(beta[itemId, ]) %*% gamma[itemId, ] - wi - cj)^2 +
lambda * (theta[userId, ] * sumVectorNorm(userId ,theta)^2) +
lambda * (beta[itemId, ] * sumVectorNorm(itemId, beta)^2) +
lambda * (gamma[itemId, ] * sumVectorNorm(itemId, gamma)^2))
)
theta[userId, ] <- (cui * beta[itemId, ] %*% t(beta[itemId, ]) + lambda * numberOfItems)^-1 * (cui * yui * beta[itemId, ])
beta[itemId, ] <- ((cui * theta[userId, ] %*% t(theta[userId, ])) + (gamma[itemId, ] %*% t(gamma[itemId, ]) + lambda * numberOfItems))^-1 *
(cui * yui * theta[userId, ] + (SPPMI[itemId, itemId] - wi - cj) * gamma[itemId, ])
gamma[itemId, ] <- (beta[itemId, ] %*% beta[itemId, ] + lambda * numberOfItems)^-1 * ((SPPMI[itemId, itemId] - wi - cj) * beta[itemId, ])
}
}
}
train("ua")
print(getwd())
setwd("C:\Development\P6\factorizationEmbedding")
setwd("C:/Development/P6/factorizationEmbedding")
print(getwd())
source('SPPMI.r')
setwd("C:/Development/P6/factorizationEmbedding")
sumVectorNorm <- function(id, matrix){
result <- 0
elements <- matrix[id, ]
elements <- norm(matrix, type = "f")
for(element in  elements){
result <- result + element
}
return(result)
}
train <- function(filename){
numberOfItems <- 1682
numberOfUsers <- 943
K <- 20
beta <- matrix(runif(numberOfItems * K, 0, 1), nrow = numberOfItems, ncol = K)
gamma <- matrix(runif(numberOfItems * K, 0, 1), nrow = numberOfItems, ncol = K)
theta <- matrix(runif(numberOfUsers * K, 0, 1), nrow = numberOfUsers, ncol = K)
yi <- 0
alpha <- 40
lambda <- 0.05
library(readr)
trainData <- read_delim(paste(getwd(), "/ml-100k/", filename, ".base", sep = ""),
"\t", escape_double = FALSE, trim_ws = TRUE,
col_names = c("userId", "movieId", "rating", "timestamp"),
col_types = cols(
userId = col_integer(),
movieId = col_integer(),
rating = col_integer(),
timestamp = col_integer()
)
);
trainData <<- as.matrix(trainData)
SPPMI <- as.matrix(getSPPMI("SPPMI.csv"))
print('Training started')
for(step in 1:5000){
Lco <- 0
for(row in 1:nrow(trainData)){
userId <- as.numeric(trainData[row, 1])
itemId <- as.numeric(trainData[row, 2])
rating <- as.numeric(trainData[row, 3])
yui <- rating
cui <- 1 + alpha * yui
wi <- 0
cj <- 0
Lco <- as.numeric(Lco + (cui * (yui - t(theta[userId, ]) %*% beta[itemId, ])^2 +
(SPPMI[userId, itemId] - t(beta[itemId, ]) %*% gamma[itemId, ] - wi - cj)^2 +
lambda * (theta[userId, ] * sumVectorNorm(userId ,theta)^2) +
lambda * (beta[itemId, ] * sumVectorNorm(itemId, beta)^2) +
lambda * (gamma[itemId, ] * sumVectorNorm(itemId, gamma)^2))
)
theta[userId, ] <- (cui * beta[itemId, ] %*% t(beta[itemId, ]) + lambda * numberOfItems)^-1 * (cui * yui * beta[itemId, ])
beta[itemId, ] <- ((cui * theta[userId, ] %*% t(theta[userId, ])) + (gamma[itemId, ] %*% t(gamma[itemId, ]) + lambda * numberOfItems))^-1 *
(cui * yui * theta[userId, ] + (SPPMI[itemId, itemId] - wi - cj) * gamma[itemId, ])
gamma[itemId, ] <- (beta[itemId, ] %*% beta[itemId, ] + lambda * numberOfItems)^-1 * ((SPPMI[itemId, itemId] - wi - cj) * beta[itemId, ])
}
}
}
install.packages("readr")
source('SPPMI.r')
source('SPPMI.r')
sumVectorNorm <- function(id, matrix){
result <- 0
elements <- matrix[id, ]
elements <- norm(matrix, type = "f")
for(element in  elements){
result <- result + element
}
return(result)
}
train <- function(filename){
numberOfItems <- 1682
numberOfUsers <- 943
K <- 20
beta <- matrix(runif(numberOfItems * K, 0, 1), nrow = numberOfItems, ncol = K)
gamma <- matrix(runif(numberOfItems * K, 0, 1), nrow = numberOfItems, ncol = K)
theta <- matrix(runif(numberOfUsers * K, 0, 1), nrow = numberOfUsers, ncol = K)
yi <- 0
alpha <- 40
lambda <- 0.05
library(readr)
trainData <- read_delim(paste(getwd(), "/ml-100k/", filename, ".base", sep = ""),
"\t", escape_double = FALSE, trim_ws = TRUE,
col_names = c("userId", "movieId", "rating", "timestamp"),
col_types = cols(
userId = col_integer(),
movieId = col_integer(),
rating = col_integer(),
timestamp = col_integer()
)
);
trainData <<- as.matrix(trainData)
SPPMI <- as.matrix(getSPPMI("SPPMI.csv"))
print('Training started')
for(step in 1:5000){
Lco <- 0
for(row in 1:nrow(trainData)){
userId <- as.numeric(trainData[row, 1])
itemId <- as.numeric(trainData[row, 2])
rating <- as.numeric(trainData[row, 3])
yui <- rating
cui <- 1 + alpha * yui
wi <- 0
cj <- 0
Lco <- as.numeric(Lco + (cui * (yui - t(theta[userId, ]) %*% beta[itemId, ])^2 +
(SPPMI[userId, itemId] - t(beta[itemId, ]) %*% gamma[itemId, ] - wi - cj)^2 +
lambda * (theta[userId, ] * sumVectorNorm(userId ,theta)^2) +
lambda * (beta[itemId, ] * sumVectorNorm(itemId, beta)^2) +
lambda * (gamma[itemId, ] * sumVectorNorm(itemId, gamma)^2))
)
theta[userId, ] <- (cui * beta[itemId, ] %*% t(beta[itemId, ]) + lambda * numberOfItems)^-1 * (cui * yui * beta[itemId, ])
beta[itemId, ] <- ((cui * theta[userId, ] %*% t(theta[userId, ])) + (gamma[itemId, ] %*% t(gamma[itemId, ]) + lambda * numberOfItems))^-1 *
(cui * yui * theta[userId, ] + (SPPMI[itemId, itemId] - wi - cj) * gamma[itemId, ])
gamma[itemId, ] <- (beta[itemId, ] %*% beta[itemId, ] + lambda * numberOfItems)^-1 * ((SPPMI[itemId, itemId] - wi - cj) * beta[itemId, ])
}
}
}
setwd("C:/Development/P6/factorizationEmbedding")
train("ua")
install.packages('readr')
install.packages('tidyverse')
makeRatingsMatrix <- function(filename, numberOfUsers, numberOfItems) {
trainData <- read_delim(paste(getwd(), "/ml-100k/", filename, ".base", sep = ""),
"\t", escape_double = FALSE, trim_ws = TRUE,
col_names = c("userId", "movieId", "rating", "timestamp"),
col_types = cols(
userId = col_integer(),
movieId = col_integer(),
rating = col_integer(),
timestamp = col_integer()
)
);
trainData <- as.matrix(trainData)
ratingsMatrix <- matrix(nrow = numberOfUsers, ncol = numberOfItems)
for(row in 1:nrow(trainData)){
ratingsMatrix[as.numeric(trainData[row, 1]), as.numeric(trainData[row, 2])] <- as.numeric(trainData[row, 3])
}
return(ratingsMatrix)
}
ratingMatrix<-makeRatingsMatrix('ua', 943, 1682)
install.packages("readr")
install.packages('readr')
install.packages('tidyverse')
makeRatingsMatrix <- function(filename, numberOfUsers, numberOfItems) {
trainData <- read_delim(paste(getwd(), "/ml-100k/", filename, ".base", sep = ""),
"\t", escape_double = FALSE, trim_ws = TRUE,
col_names = c("userId", "movieId", "rating", "timestamp"),
col_types = cols(
userId = col_integer(),
movieId = col_integer(),
rating = col_integer(),
timestamp = col_integer()
)
);
trainData <- as.matrix(trainData)
ratingsMatrix <- matrix(nrow = numberOfUsers, ncol = numberOfItems)
for(row in 1:nrow(trainData)){
ratingsMatrix[as.numeric(trainData[row, 1]), as.numeric(trainData[row, 2])] <- as.numeric(trainData[row, 3])
}
return(ratingsMatrix)
}
ratingMatrix<-makeRatingsMatrix('ua', 943, 1682)
library(readr)
install.packages('readr')
install.packages('tidyverse')
makeRatingsMatrix <- function(filename, numberOfUsers, numberOfItems) {
trainData <- read_delim(paste(getwd(), "/ml-100k/", filename, ".base", sep = ""),
"\t", escape_double = FALSE, trim_ws = TRUE,
col_names = c("userId", "movieId", "rating", "timestamp"),
col_types = cols(
userId = col_integer(),
movieId = col_integer(),
rating = col_integer(),
timestamp = col_integer()
)
);
trainData <- as.matrix(trainData)
ratingsMatrix <- matrix(nrow = numberOfUsers, ncol = numberOfItems)
for(row in 1:nrow(trainData)){
ratingsMatrix[as.numeric(trainData[row, 1]), as.numeric(trainData[row, 2])] <- as.numeric(trainData[row, 3])
}
return(ratingsMatrix)
}
ratingMatrix<-makeRatingsMatrix('ua', 943, 1682)
install.packages("readr")
install.packages('readr')
install.packages('tidyverse')
makeRatingsMatrix <- function(filename, numberOfUsers, numberOfItems) {
trainData <- read_delim(paste(getwd(), "/ml-100k/", filename, ".base", sep = ""),
"\t", escape_double = FALSE, trim_ws = TRUE,
col_names = c("userId", "movieId", "rating", "timestamp"),
col_types = cols(
userId = col_integer(),
movieId = col_integer(),
rating = col_integer(),
timestamp = col_integer()
)
);
trainData <- as.matrix(trainData)
ratingsMatrix <- matrix(nrow = numberOfUsers, ncol = numberOfItems)
for(row in 1:nrow(trainData)){
ratingsMatrix[as.numeric(trainData[row, 1]), as.numeric(trainData[row, 2])] <- as.numeric(trainData[row, 3])
}
return(ratingsMatrix)
}
ratingMatrix<-makeRatingsMatrix('ua', 943, 1682)
library(readr)
source('SPPMI.r')
sumVectorNorm <- function(id, matrix){
result <- 0
elements <- matrix[id, ]
elements <- norm(matrix, type = "f")
for(element in  elements){
result <- result + element
}
return(result)
}
train <- function(filename){
numberOfItems <- 1682
numberOfUsers <- 943
K <- 20
beta <- matrix(runif(numberOfItems * K, 0, 1), nrow = numberOfItems, ncol = K)
gamma <- matrix(runif(numberOfItems * K, 0, 1), nrow = numberOfItems, ncol = K)
theta <- matrix(runif(numberOfUsers * K, 0, 1), nrow = numberOfUsers, ncol = K)
yi <- 0
alpha <- 40
lambda <- 0.05
trainData <- read_delim(paste(getwd(), "/ml-100k/", filename, ".base", sep = ""),
"\t", escape_double = FALSE, trim_ws = TRUE,
col_names = c("userId", "movieId", "rating", "timestamp"),
col_types = cols(
userId = col_integer(),
movieId = col_integer(),
rating = col_integer(),
timestamp = col_integer()
)
);
trainData <<- as.matrix(trainData)
SPPMI <- as.matrix(getSPPMI("SPPMI.csv"))
print('Training started')
for(step in 1:5000){
Lco <- 0
for(row in 1:nrow(trainData)){
userId <- as.numeric(trainData[row, 1])
itemId <- as.numeric(trainData[row, 2])
rating <- as.numeric(trainData[row, 3])
yui <- rating
cui <- 1 + alpha * yui
wi <- 0
cj <- 0
Lco <- as.numeric(Lco + (cui * (yui - t(theta[userId, ]) %*% beta[itemId, ])^2 +
(SPPMI[userId, itemId] - t(beta[itemId, ]) %*% gamma[itemId, ] - wi - cj)^2 +
lambda * (theta[userId, ] * sumVectorNorm(userId ,theta)^2) +
lambda * (beta[itemId, ] * sumVectorNorm(itemId, beta)^2) +
lambda * (gamma[itemId, ] * sumVectorNorm(itemId, gamma)^2))
)
theta[userId, ] <- (cui * beta[itemId, ] %*% t(beta[itemId, ]) + lambda * numberOfItems)^-1 * (cui * yui * beta[itemId, ])
beta[itemId, ] <- ((cui * theta[userId, ] %*% t(theta[userId, ])) + (gamma[itemId, ] %*% t(gamma[itemId, ]) + lambda * numberOfItems))^-1 *
(cui * yui * theta[userId, ] + (SPPMI[itemId, itemId] - wi - cj) * gamma[itemId, ])
gamma[itemId, ] <- (beta[itemId, ] %*% beta[itemId, ] + lambda * numberOfItems)^-1 * ((SPPMI[itemId, itemId] - wi - cj) * beta[itemId, ])
}
}
}
install.packages("readr")
source('SPPMI.r')
sumVectorNorm <- function(id, matrix){
result <- 0
elements <- matrix[id, ]
elements <- norm(matrix, type = "f")
for(element in  elements){
result <- result + element
}
return(result)
}
train <- function(filename){
numberOfItems <- 1682
numberOfUsers <- 943
K <- 20
beta <- matrix(runif(numberOfItems * K, 0, 1), nrow = numberOfItems, ncol = K)
gamma <- matrix(runif(numberOfItems * K, 0, 1), nrow = numberOfItems, ncol = K)
theta <- matrix(runif(numberOfUsers * K, 0, 1), nrow = numberOfUsers, ncol = K)
yi <- 0
alpha <- 40
lambda <- 0.05
trainData <- read_delim(paste(getwd(), "/ml-100k/", filename, ".base", sep = ""),
"\t", escape_double = FALSE, trim_ws = TRUE,
col_names = c("userId", "movieId", "rating", "timestamp"),
col_types = cols(
userId = col_integer(),
movieId = col_integer(),
rating = col_integer(),
timestamp = col_integer()
)
);
trainData <<- as.matrix(trainData)
SPPMI <- as.matrix(getSPPMI("SPPMI.csv"))
print('Training started')
for(step in 1:5000){
Lco <- 0
for(row in 1:nrow(trainData)){
userId <- as.numeric(trainData[row, 1])
itemId <- as.numeric(trainData[row, 2])
rating <- as.numeric(trainData[row, 3])
yui <- rating
cui <- 1 + alpha * yui
wi <- 0
cj <- 0
Lco <- as.numeric(Lco + (cui * (yui - t(theta[userId, ]) %*% beta[itemId, ])^2 +
(SPPMI[userId, itemId] - t(beta[itemId, ]) %*% gamma[itemId, ] - wi - cj)^2 +
lambda * (theta[userId, ] * sumVectorNorm(userId ,theta)^2) +
lambda * (beta[itemId, ] * sumVectorNorm(itemId, beta)^2) +
lambda * (gamma[itemId, ] * sumVectorNorm(itemId, gamma)^2))
)
theta[userId, ] <- (cui * beta[itemId, ] %*% t(beta[itemId, ]) + lambda * numberOfItems)^-1 * (cui * yui * beta[itemId, ])
beta[itemId, ] <- ((cui * theta[userId, ] %*% t(theta[userId, ])) + (gamma[itemId, ] %*% t(gamma[itemId, ]) + lambda * numberOfItems))^-1 *
(cui * yui * theta[userId, ] + (SPPMI[itemId, itemId] - wi - cj) * gamma[itemId, ])
gamma[itemId, ] <- (beta[itemId, ] %*% beta[itemId, ] + lambda * numberOfItems)^-1 * ((SPPMI[itemId, itemId] - wi - cj) * beta[itemId, ])
}
}
}
train("ua")
library(readr)
train("ua")
getSPPMI <- function(){
SPPMI <- read.csv("SPPMI.csv", header=FALSE, sep = ",")
return(as.matrix(SPPMI))
}
train("ua")
source('matrixFactorization.r')
createHashIJ <- function(ratingMatrix){
nrItems <- ncol(ratingMatrix)
hashIJ <- matrix(nrow=nrItems, ncol=nrItems)
for(itemOne in 1:nrItems){
print(itemOne)
for(itemTwo in itemOne:nrItems){
itemsRated <- which(ratingMatrix[, itemOne] > 3 & ratingMatrix[, itemTwo] > 3)
hashIJ[itemOne, itemTwo] <- length(itemsRated)
}
}
return(hashIJ)
}
calculateD <- function(hashIJ){
nrItems <- ncol(hashIJ)
D <- 0
for(itemPair in 1:nrItems){
D <- D + length(which(!is.na(hashIJ[itemPair,]) & hashIJ[itemPair,] != 0))
}
return(D-nrItems)
}
PMI <- function(hashIJ, D, i, j){
if(i < j){
top <- hashIJ[i, j]*D
bottom <- hashIJ[i, i]*hashIJ[j, j]
}
else{
top <- hashIJ[j, i]*D
bottom <- hashIJ[i, i]*hashIJ[j, j]
}
return(log(top/bottom))
}
createSPPMI <- function(hashIJ, D){
nrItems <- 1682
SPPMI = matrix(nrow=nrItems, ncol=nrItems)
k = 10
for(i in 1:nrItems){
for(j in 1:nrItems){
SPPMI[i, j] <- max(PMI(hashIJ, D, i, j) - log(k), 0)
}
}
write.table(SPPMI, file = paste("SPPMI.csv", sep = ""), sep = ",", row.names = F, col.names = F) #virker ikke ordenligt
}
executeSPPMI <- function(fileName){
hashIJ <- createHashIJ(makeRatingsMatrix(fileName, 943, 1682))
D <- calculateD(hashIJ)
createSPPMI(hashIJ, D)
}
getSPPMI <- function(){
SPPMI <- read.csv("SPPMI.csv", header=FALSE, sep = ",")
return(as.matrix(SPPMI))
}
install.packages("readr")
print(getwd())
getSPPMI <- function(){
SPPMI <- read.csv(paste(getwd(), "/SPPMI.csv", sep = ""), header=FALSE, sep = ",")
return(as.matrix(SPPMI))
}
getSPPMI()
sumVectorNorm <- function(id, matrix){
result <- 0
elements <- matrix[id, ]
elements <- norm(matrix, type = "f")
for(element in  elements){
result <- result + element
}
return(result)
}
train <- function(filename){
numberOfItems <- 1682
numberOfUsers <- 943
K <- 20
beta <- matrix(runif(numberOfItems * K, 0, 1), nrow = numberOfItems, ncol = K)
gamma <- matrix(runif(numberOfItems * K, 0, 1), nrow = numberOfItems, ncol = K)
theta <- matrix(runif(numberOfUsers * K, 0, 1), nrow = numberOfUsers, ncol = K)
yi <- 0
alpha <- 40
lambda <- 0.05
trainData <- read_delim(paste(getwd(), "/ml-100k/", filename, ".base", sep = ""),
"\t", escape_double = FALSE, trim_ws = TRUE,
col_names = c("userId", "movieId", "rating", "timestamp"),
col_types = cols(
userId = col_integer(),
movieId = col_integer(),
rating = col_integer(),
timestamp = col_integer()
)
);
trainData <<- as.matrix(trainData)
SPPMI <- as.matrix(getSPPMI("SPPMI.csv"))
print('Training started')
for(step in 1:5000){
Lco <- 0
for(row in 1:nrow(trainData)){
userId <- as.numeric(trainData[row, 1])
itemId <- as.numeric(trainData[row, 2])
rating <- as.numeric(trainData[row, 3])
yui <- rating
cui <- 1 + alpha * yui
wi <- 0
cj <- 0
Lco <- as.numeric(Lco + (cui * (yui - t(theta[userId, ]) %*% beta[itemId, ])^2 +
(SPPMI[userId, itemId] - t(beta[itemId, ]) %*% gamma[itemId, ] - wi - cj)^2 +
lambda * (theta[userId, ] * sumVectorNorm(userId ,theta)^2) +
lambda * (beta[itemId, ] * sumVectorNorm(itemId, beta)^2) +
lambda * (gamma[itemId, ] * sumVectorNorm(itemId, gamma)^2))
)
theta[userId, ] <- (cui * beta[itemId, ] %*% t(beta[itemId, ]) + lambda * numberOfItems)^-1 * (cui * yui * beta[itemId, ])
beta[itemId, ] <- ((cui * theta[userId, ] %*% t(theta[userId, ])) + (gamma[itemId, ] %*% t(gamma[itemId, ]) + lambda * numberOfItems))^-1 *
(cui * yui * theta[userId, ] + (SPPMI[itemId, itemId] - wi - cj) * gamma[itemId, ])
gamma[itemId, ] <- (beta[itemId, ] %*% beta[itemId, ] + lambda * numberOfItems)^-1 * ((SPPMI[itemId, itemId] - wi - cj) * beta[itemId, ])
}
}
}
train("ua")
library(readr)
train("ua")
source('SPPMI.r')
install.packages("readr")
